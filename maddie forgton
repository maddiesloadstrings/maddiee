getgenv().ScriptConfig = getgenv().ScriptConfig or {
    SpeedConfig = {
        Multiplier = 2,
        ToggleKey = Enum.KeyCode.Z
    },

    FlyConfig = {
        ToggleKey = Enum.KeyCode.H,
        Speed = 500,
        VerticalSpeed = 400
    },

    CameraLockConfig = {
        ToggleKey = Enum.KeyCode.C,
        Prediction = 0
    },

    KillPlayerKey = Enum.KeyCode.Y
}

if getgenv().already_executed then return end
getgenv().already_executed = true

local success, NotifyLibrary = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/XK5NG/XK5NG.github.io/main/Notify"))()
end)
local Notify = success and NotifyLibrary.Notify or function(params)
    print((params.Title or "Notification") .. ": " .. (params.Text or "No Text"))
end

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local HRP = character:WaitForChild("HumanoidRootPart", 10)
local humanoid = character:WaitForChild("Humanoid")

local animation = Instance.new("Animation")
animation.AnimationId = "rbxassetid://10714340543"
local animationtrack = humanoid:LoadAnimation(animation)
local isPlaying = false

-- New Animation for N Keybind
local animation2 = Instance.new("Animation")
animation2.AnimationId = "rbxassetid://3152378852"
local animationtrack2 = humanoid:LoadAnimation(animation2)
local isPlaying2 = false

local cameraLockActive = false
local speedActive = false
local flyActive = false
local flyToggle = nil

local function toggleSpeed()
    speedActive = not speedActive
    if speedActive then
        Notify({Title = "Speed == On", Duration = 2})
        RunService:BindToRenderStep("cframeSpeed", Enum.RenderPriority.Character.Value, function()
            local moveDirection = Vector3.zero
            local camera = Workspace.CurrentCamera

            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                moveDirection += (camera.CFrame.LookVector * Vector3.new(1, 0, 1)).Unit
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                moveDirection -= (camera.CFrame.LookVector * Vector3.new(1, 0, 1)).Unit
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                moveDirection -= (camera.CFrame.RightVector * Vector3.new(1, 0, 1)).Unit
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                moveDirection += (camera.CFrame.RightVector * Vector3.new(1, 0, 1)).Unit
            end

            if HRP then
                HRP.CFrame = HRP.CFrame + (moveDirection * getgenv().ScriptConfig.SpeedConfig.Multiplier)
            end
        end)
    else
        RunService:UnbindFromRenderStep("cframeSpeed")
        Notify({Title = "Speed == Off", Duration = 2})
    end
end

local function startFlying()
    flyActive = true
    Notify({Title = "Fly == On", Duration = 2})
    local flyLoop
    flyLoop = RunService.RenderStepped:Connect(function()
        if not flyActive then
            flyLoop:Disconnect()
            HRP.Velocity = Vector3.zero
            return
        end

        local direction = Vector3.zero
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            direction += Workspace.CurrentCamera.CFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            direction -= Workspace.CurrentCamera.CFrame.LookVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            direction -= Workspace.CurrentCamera.CFrame.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            direction += Workspace.CurrentCamera.CFrame.RightVector
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
            direction += Vector3.new(0, getgenv().ScriptConfig.FlyConfig.VerticalSpeed, 0)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
            direction -= Vector3.new(0, getgenv().ScriptConfig.FlyConfig.VerticalSpeed, 0)
        end

        HRP.Velocity = direction.Magnitude > 0 and direction.Unit * getgenv().ScriptConfig.FlyConfig.Speed or Vector3.new(0, 0.1, 0)
    end)

    return function()
        flyActive = false
        HRP.Velocity = Vector3.zero
        Notify({Title = "Fly == Off", Duration = 2})
    end
end

local function toggleCameraLock()
    cameraLockActive = not cameraLockActive
    local lockedPlayer = nil

    if cameraLockActive then
        Notify({Title = "CamLock Enabled", Duration = 2})
        local closestDistance = math.huge
        local mouse = player:GetMouse()
        
        for _, otherPlayer in ipairs(Players:GetPlayers()) do
            if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local hrp = otherPlayer.Character.HumanoidRootPart
                local screenPoint, onScreen = Workspace.CurrentCamera:WorldToScreenPoint(hrp.Position)
                if onScreen then
                    local distance = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(screenPoint.X, screenPoint.Y)).Magnitude
                    if distance < closestDistance then
                        closestDistance = distance
                        lockedPlayer = otherPlayer
                    end
                end
            end
        end

        if lockedPlayer then
            RunService:BindToRenderStep("cameraLock", Enum.RenderPriority.Camera.Value, function()
                if lockedPlayer and lockedPlayer.Character and lockedPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local targetHRP = lockedPlayer.Character.Head
                    Workspace.CurrentCamera.CFrame = CFrame.lookAt(
                        Workspace.CurrentCamera.CFrame.Position,
                        targetHRP.Position + targetHRP.Velocity * getgenv().ScriptConfig.CameraLockConfig.Prediction
                    )
                else
                    Notify({Title = "logged", Duration = 2})
                    RunService:UnbindFromRenderStep("cameraLock")
                    cameraLockActive = false
                end
            end)
        else
            Notify({Title = "man", Duration = 2})
            cameraLockActive = false
        end
    else
        Notify({Title = "camlock disabled", Duration = 2})
        RunService:UnbindFromRenderStep("cameraLock")
    end
end

local function setDeadState()
    if humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Dead)
    end
end

local function enterPromoCodes()
    local promoCodes = {
        "DAUP", "TRADEME", "pumpkins2023", "RUBY", 
        "HALLOWEEN2024", "DACARNIVAL", "NIGHTMARE", "GHOST",
        "THANKSGIVING24", "AIM", "ELECTION"
    }

    local mainEvent = game:GetService("ReplicatedStorage"):WaitForChild("MainEvent")

    for _, code in ipairs(promoCodes) do
        mainEvent:FireServer("EnterPromoCode", code)
        Notify({Title = "code entered ; " .. code,1})
        task.wait(3.4)
    end
end

player.CharacterAdded:Connect(function()
    character = player.Character or player.CharacterAdded:Wait()
    HRP = character:WaitForChild("HumanoidRootPart", 10)
    humanoid = character:WaitForChild("Humanoid")
    animationtrack = humanoid:LoadAnimation(animation)
    animationtrack2 = humanoid:LoadAnimation(animation2)
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed then
        if input.KeyCode == getgenv().ScriptConfig.SpeedConfig.ToggleKey then
            toggleSpeed()
        elseif input.KeyCode == getgenv().ScriptConfig.FlyConfig.ToggleKey then
            if not flyActive then
                flyToggle = startFlying()
            else
                flyToggle()
            end
        elseif input.KeyCode == getgenv().ScriptConfig.CameraLockConfig.ToggleKey then
            toggleCameraLock()
        elseif input.KeyCode == getgenv().ScriptConfig.KillPlayerKey then
            setDeadState()
        elseif input.KeyCode == Enum.KeyCode.V then
            if isPlaying then
                animationtrack:Stop()
                isPlaying = false
            else
                animationtrack:Play()
                isPlaying = true
            end
        elseif input.KeyCode == Enum.KeyCode.N then
            if isPlaying2 then
                animationtrack2:Stop()
                isPlaying2 = false
            else
                animationtrack2:Play()
                isPlaying2 = true
            end
        elseif input.KeyCode == Enum.KeyCode.L then
            enterPromoCodes()
        end
    end
end)

StarterGui:SetCore("SendNotification", {Title = "mad.lol", Text = "loaded", Duration = 5})

task.wait() 
enabled = true --chat "/spy" to toggle!
spyOnMyself = true --if true will check your messages too
public = false --if true will chat the logs publicly (fun, risky)
publicItalics = true --if true will use /me to stand out
privateProperties = { --customize private logs
	Color = Color3.fromRGB(0,255,255); 
	Font = Enum.Font.SourceSansBold;
	TextSize = 18;
}


local StarterGui = game:GetService("StarterGui")
local Players = game:GetService("Players")
local player = Players.LocalPlayer or Players:GetPropertyChangedSignal("LocalPlayer"):Wait() or Players.LocalPlayer
local saymsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest")
local getmsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("OnMessageDoneFiltering")
local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

local function onChatted(p,msg)
	if _G.chatSpyInstance == instance then
		if p==player and msg:lower():sub(1,4)=="/spy" then
			enabled = not enabled
			wait(0.3)
			StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
		elseif enabled and (spyOnMyself==true or p~=player) then
			msg = msg:gsub("[\n\r]",''):gsub("\t",' '):gsub("[ ]+",' ')
			local hidden = true
			local conn = getmsg.OnClientEvent:Connect(function(packet,channel)
				if packet.SpeakerUserId==p.UserId and packet.Message==msg:sub(#msg-#packet.Message+1) and (channel=="All" or (channel=="Team" and public==false and Players[packet.FromSpeaker].Team==player.Team)) then
					hidden = false
				end
			end)
			wait(1)
			conn:Disconnect()
			if hidden and enabled then
				if public then
					saymsg:FireServer((publicItalics and "/me " or '').."{SPY} [".. p.Name .."]: "..msg,"All")
				else
					privateProperties.Text = "{SPY} [".. p.Name .."]: "..msg
					StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
				end
			end
		end
	end
end

for _,p in ipairs(Players:GetPlayers()) do
	p.Chatted:Connect(function(msg) onChatted(p,msg) end)
end
Players.PlayerAdded:Connect(function(p)
	p.Chatted:Connect(function(msg) onChatted(p,msg) end)
end)
StarterGui:SetCore("ChatMakeSystemMessage",privateProperties)
if not player.PlayerGui:FindFirstChild("Chat") then wait(3) end
local chatFrame = player.PlayerGui.Chat.Frame
chatFrame.ChatChannelParentFrame.Visible = true
chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position+UDim2.new(UDim.new(),chatFrame.ChatChannelParentFrame.Size.Y)
